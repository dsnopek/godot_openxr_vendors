name: XR Simulator Tests

# TEst

on: [push, pull_request]

#jobs:
#  run_xr_simulator:
#   runs-on: [Windows, self-hosted, gpu]
#
#   steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Install Chocolatey
#        run: |
#          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
#
#      - name: Install 7zip
#        run: |
#          choco install 7zip -y
#
#      - name: Download Godot
#        run: |
#          # @todo Download an actual Godot build!
#          Invoke-WebRequest -Uri "https://www.dropbox.com/scl/fi/qyklduqyv9m1yqmdn2jdy/godot.windows.editor.dev.x86_64.exe.zip?rlkey=5eatkzb1n73258yo36izrfj59&st=2y23hgqs&dl=1" -OutFile "godot.zip"
#
#      - name: Extract Godot
#        run: |
#          Expand-Archive -Path "godot.zip" -DestinationPath .
#
#      - name: Download Meta XR Simulator
#        run: |
#          Invoke-WebRequest -Uri "https://securecdn.oculus.com/binaries/download/?id=7377333452380808&access_token=OCASsWfPgbJaWh6YZAJNHSebmBalnkZCtjwQJdZAu7vjdwoHZCAY8MDuTuLDpRZAV1O92ovkZAKYeHc8DK0goz41N1SOlzPkYpv5F6pLjv9fzQZDZD" -OutFile "download.zip"
#
#      - name: Extract Meta XR Simulator
#        run: |
#          # Unzip.
#          Expand-Archive -Path "download.zip" -DestinationPath "C:\Meta\" -Force
#
#          # Gunzip.
#          $tgzFile = Get-ChildItem -Path "C:\Meta" -Filter *.tgz
#          7z x $tgzFile.FullName -oC:\Meta -aoa
#
#          # Untar.
#          $tarFile = Get-ChildItem -Path "C:\Meta" -Filter *.tar
#          7z x $tarFile.FullName -oC:\Meta -aoa
#
#      - name: Configure the Meta XR Simulator as the active OpenXR runtime
#        run: |
#          New-Item -Path "HKLM:\SOFTWARE\Khronos\OpenXR\1" -Name "ActiveRuntime" -Force
#          Set-ItemProperty -Path "HKLM:\SOFTWARE\Khronos\OpenXR\1" -Name "ActiveRuntime" -Value "C:\Meta\package\MetaXRSimulator\meta_openxr_simulator.json"
#
#      #- name: Download Windows build artifacts
#      #  uses: actions/download-artifact@v3
#      #  with:
#      #    name: build-files-windows
#      #    path: build-files-windows
#
#      #- name: Copy Windows build of the addon into the demo project
#      #  run: |
#      #    mkdir -p demo/addons/godotopenxrvendors/.bin/windows/
#      #    cp -r build-files-windows/* demo/addons/godotopenxrvendors/.bin/windows/
#
#      #- name: Import the demo project
#      #  run: |
#      #    $godot = "godot.windows.editor.dev.x86_64.exe"
#      #    Start-Process -FilePath "$godot" -ArgumentList "--path demo --import --headless" -NoNewWindow -Wait
#      #  shell: pwsh
#
#      - name: Launch a synthetic environment
#        run: |
#          # @todo Ensure a synthetic environment isn't already running
#          Start-Process -FilePath "C:\Meta\package\MetaXRSimulator\.synth_env_server\synth_env_server.exe" -ArgumentList "Bedroom" -PassThru
#
#      - name: Run tests
#        run: |
#          $jsonPath = "$env:AppData\MetaXR\MetaXrSimulator\persistent_data.json"
#
#          $vrsFiles = Get-ChildItem -Path tests/vrs -Filter *.vrs
#          foreach ($file in $vrsFiles) {
#            $replayPath = Join-Path -Path $file.DirectoryName -ChildPath ($file.BaseName + "-replay.vrs")
#            $jsonContent = @{
#              session_capture = @{
#                delay_start_ms = 5000
#                exec_state = "replay"
#                quit_buffer_ms = 5000
#                quit_when_complete = $true
#                record_path = $file.FullName
#                replay_path = $replayPath
#              }
#            } | ConvertTo-Json
#
#            New-Item -ItemType Directory -Force -Path (Split-Path $jsonPath)
#            Set-Content -Path $jsonPath -Value $jsonContent
#            echo "$jsonContent"
#
#            $godot = "godot.windows.editor.dev.x86_64.exe"
#            $timeout = 300
#            $waitTime = 0
#
#            $process = Start-Process -FilePath "$godot" -ArgumentList "--path demo --rendering-method mobile --verbose -- --quit-with-openxr" -NoNewWindow -PassThru
#
#            while ($process.HasExited -eq $false -and $waitTime -lt $timeout) {
#                Start-Sleep -Seconds 1
#                $waitTime++
#            }
#
#            if ($process.HasExited -eq $false) {
#                Write-Output "Process is still running after $timeout seconds. Stopping the process."
#                $process.Kill()
#                Exit 1
#            } else {
#                Write-Output "Process completed within $waitTime seconds."
#            }
#
#            if (-Not (Test-Path $replayPath)) {
#              Write-Error "Replay file not found: $replayPath"
#              Exit 1
#            }
#          }
#
#      - name: Stop synthetic environment
#        run: |
#          Get-Process -Name "synth_env_server" | Stop-Process
#
#      - name: Copy vrs_pixmatch.py from Meta XR Simulator
#        run: |
#          $scriptPath = "$env:AppData\MetaXR\MetaXrSimulator\scripts"
#          cp "$scriptsPath\requirements.txt" "$scriptsPath\vrs_pixmatch.py" tests/vrs/
#
#      - name: Upload VRS artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: ReplayVRS
#          path: tests/vrs/**/*
