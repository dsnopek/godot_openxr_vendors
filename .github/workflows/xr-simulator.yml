name: XR Simulator Tests

# TEst

on: [push, pull_request]

jobs:
  run_xr_simulator:
   runs-on: windows-2019

   steps:
      - name: Checkout code
        uses: actions/checkout@v3

#      - name: Download pyvrs
#        run: |
#          git clone https://github.com/facebookresearch/pyvrs.git
#          cd pyvrs
#          git submodule sync --recursive
#          git submodule update --init --recursive
#
#      - name: Download Godot
#        run: |
#          $fileId = "1CvY7nqkqMbASpUrywtMvVfjXj9zyEj4H"
#          $fileName = "godot.zip"
#          $cookiePath = "$env:TEMP\cookies.txt"
#
#          # Step 1: Get the confirmation token
#          $initialUrl = "https://docs.google.com/uc?export=download&id=$fileId"
#          $response = Invoke-WebRequest -Uri $initialUrl -SessionVariable session -UseBasicParsing
#          $confirmToken = ($response.Content -split "`n" | Where-Object { $_ -match 'confirm=' }).Split("=")[1].Split("&")[0]
#
#          # Step 2: Use the token to download the file
#          $downloadUrl = "https://docs.google.com/uc?export=download&confirm=$confirmToken&id=$fileId"
#          Invoke-WebRequest -Uri $downloadUrl -WebSession $session -OutFile $fileName -UseBasicParsing
#
#          # Clean up
#          Remove-Item $cookiePath -ErrorAction Ignore
#        shell: pwsh

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        shell: pwsh

      - name: Install 7zip
        run: |
          choco install 7zip -y
        shell: pwsh

      - name: Download Godot
        run: |
          Invoke-WebRequest -Uri "https://www.dropbox.com/scl/fi/qyklduqyv9m1yqmdn2jdy/godot.windows.editor.dev.x86_64.exe.zip?rlkey=5eatkzb1n73258yo36izrfj59&st=2y23hgqs&dl=1" -OutFile "godot.zip"
        shell: pwsh

      - name: Extract Godot
        run: |
          Expand-Archive -Path "godot.zip" -DestinationPath .

      - name: Download Meta XR Simulator
        run: |
          Invoke-WebRequest -Uri "https://securecdn.oculus.com/binaries/download/?id=7377333452380808&access_token=OCASsWfPgbJaWh6YZAJNHSebmBalnkZCtjwQJdZAu7vjdwoHZCAY8MDuTuLDpRZAV1O92ovkZAKYeHc8DK0goz41N1SOlzPkYpv5F6pLjv9fzQZDZD" -OutFile "download.zip"
        shell: pwsh

      - name: Extract Meta XR Simulator
        run: |
          # Unzip.
          Expand-Archive -Path "download.zip" -DestinationPath "C:\Meta\"

          # Gunzip.
          $tgzFile = Get-ChildItem -Path "C:\Meta" -Filter *.tgz
          7z x $tgzFile.FullName -oC:\Meta

          # Untar.
          $tarFile = Get-ChildItem -Path "C:\Meta" -Filter *.tar
          7z x $tarFile.FullName -oC:\Meta
        shell: pwsh

      - name: Configure the Meta XR Simulator as the active OpenXR runtime
        run: |
          New-Item -Path "HKLM:\SOFTWARE\Khronos\OpenXR\1" -Name "ActiveRuntime" -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Khronos\OpenXR\1" -Name "ActiveRuntime" -Value "C:\Meta\package\MetaXRSimulator\meta_openxr_simulator.json"
        shell: pwsh

      - name: Import the demo project
        run: |
            $godot = "godot.windows.editor.dev.x86_64.exe"
            Start-Process -FilePath "$godot" -ArgumentList "--path demo --import --headless" -NoNewWindow -Wait
        shell: pwsh

      - name: Run tests
        run: |
          $jsonPath = "$env:AppData\MetaXR\MetaXrSimulator\persistent_data.json"

          $vrsFiles = Get-ChildItem -Path tests/vrs -Filter *.vrs
          foreach ($file in $vrsFiles) {
            $replayPath = Join-Path -Path $file.DirectoryName -ChildPath ($file.BaseName + "-replay.vrs")
            $jsonContent = @{
              session_capture = @{
                delay_start_ms = 5000
                exec_state = "replay"
                quit_buffer_ms = 5000
                quit_when_complete = $true
                record_path = $file.FullName
                replay_path = $replayPath
              }
            } | ConvertTo-Json

            New-Item -ItemType Directory -Force -Path (Split-Path $jsonPath)
            Set-Content -Path $jsonPath -Value $jsonContent
            echo "$jsonContent"

            $godot = "godot.windows.editor.dev.x86_64.exe"
            $timeout = 120
            $waitTime = 0

            $process = Start-Process -FilePath "$godot" -ArgumentList "--path demo --rendering-method mobile --verbose" -NoNewWindow -PassThru

            while ($process.HasExited -eq $false -and $waitTime -lt $timeout) {
                Start-Sleep -Seconds 1
                $waitTime++
            }

            if ($process.HasExited -eq $false) {
                Write-Output "Process is still running after $timeout seconds. Stopping the process."
                $process.Kill()
                Exit 1
            } else {
                Write-Output "Process completed within $waitTime seconds."
            }

            if (-Not (Test-Path $replayPath)) {
              Write-Error "Replay file not found: $filepath"
              Exit 1
            }
          }
