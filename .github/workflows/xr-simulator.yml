name: XR Simulator Tests

# TEst

on: [push, pull_request]

jobs:
  run_xr_simulator:
   runs-on: windows-2019

   steps:
      - name: Checkout code
        uses: actions/checkout@v3

#      - name: Download pyvrs
#        run: |
#          git clone https://github.com/facebookresearch/pyvrs.git
#          cd pyvrs
#          git submodule sync --recursive
#          git submodule update --init --recursive
#
#      - name: Download Godot
#        run: |
#          $fileId = "1CvY7nqkqMbASpUrywtMvVfjXj9zyEj4H"
#          $fileName = "godot.zip"
#          $cookiePath = "$env:TEMP\cookies.txt"
#
#          # Step 1: Get the confirmation token
#          $initialUrl = "https://docs.google.com/uc?export=download&id=$fileId"
#          $response = Invoke-WebRequest -Uri $initialUrl -SessionVariable session -UseBasicParsing
#          $confirmToken = ($response.Content -split "`n" | Where-Object { $_ -match 'confirm=' }).Split("=")[1].Split("&")[0]
#
#          # Step 2: Use the token to download the file
#          $downloadUrl = "https://docs.google.com/uc?export=download&confirm=$confirmToken&id=$fileId"
#          Invoke-WebRequest -Uri $downloadUrl -WebSession $session -OutFile $fileName -UseBasicParsing
#
#          # Clean up
#          Remove-Item $cookiePath -ErrorAction Ignore
#        shell: pwsh

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        shell: pwsh

      - name: Install 7zip
        run: |
          choco install 7zip -y
        shell: pwsh

      - name: Download Godot
        run: |
          Invoke-WebRequest -Uri "https://www.dropbox.com/scl/fi/qyklduqyv9m1yqmdn2jdy/godot.windows.editor.dev.x86_64.exe.zip?rlkey=5eatkzb1n73258yo36izrfj59&st=2y23hgqs&dl=1" -OutFile "godot.zip"
        shell: pwsh

      - name: Extract Godot
        run: |
          Expand-Archive -Path "godot.zip" -DestinationPath .
          dir

      - name: Download Meta XR Simulator
        run: |
          Invoke-WebRequest -Uri "https://securecdn.oculus.com/binaries/download/?id=7377333452380808&access_token=OCASsWfPgbJaWh6YZAJNHSebmBalnkZCtjwQJdZAu7vjdwoHZCAY8MDuTuLDpRZAV1O92ovkZAKYeHc8DK0goz41N1SOlzPkYpv5F6pLjv9fzQZDZD" -OutFile "download.zip"
        shell: pwsh

      - name: Extract Meta XR Simulator
        run: |
          Expand-Archive -Path "download.zip" -DestinationPath "C:\Meta\"
          $tgzFile = Get-ChildItem -Path "C:\Meta" -Filter *.tgz
          7z x $tgzFile.FullName -oC:\Meta
          $tarFile = Get-ChildItem -Path "C:\Meta" -Filter *.tar
          7z x $tarFile.FullName -oC:\Meta
          dir "C:\Meta"
        shell: pwsh

      - name: Run tests
        run: |
          #$env:AppData = [System.Environment]::GetFolderPath('ApplicationData')

          # Generate a random password
          $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+"
          $password = -join ((33..126) | Get-Random -Count 16 | ForEach-Object {[char]$_})
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force

          New-LocalUser "testuser" -Password $securePassword
          Add-LocalGroupMember -Group "Users" -Member "testuser"

          $vrsFiles = Get-ChildItem -Path tests/vrs -Filter *.vrs
          foreach ($file in $vrsFiles) {
            $replayPath = Join-Path -Path $file.DirectoryName -ChildPath ($file.BaseName + "-replay.vrs")
            $jsonContent = @{
              session_capture = @{
                delay_start_ms = 5000
                exec_state = "replay"
                quit_buffer_ms = 5000
                quit_when_complete = true
                record_path = $file.FullName
                replay_path = $replayPath
              }
            } | ConvertTo-Json

            $jsonPath = "$env:AppData\Roaming\MetaXR\MetaXrSimulator\persistent_data.json"
            New-Item -ItemType Directory -Force -Path (Split-Path $jsonPath)
            Set-Content -Path $jsonPath -Value $jsonContent

            $env:XR_RUNTIME_JSON = "C:\Meta\package\MetaXRSimulator\meta_openxr_simulator.json"

            # Run as non-elevated process so the XR_RUNTIME_JSON will get picked up.
            $workingDirectory = "${{ github.workspace }}"
            # @todo Point to permanent Godot executable.
            $godot = "$workingDirectory/godot.windows.editor.dev.x86_64.exe"
            Start-Process -FilePath "$godot" -ArgumentList "--path demo" -NoNewWindow -Credential (New-Object System.Management.Automation.PSCredential("testuser", $securePassword))
          }
